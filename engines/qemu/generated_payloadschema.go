// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package qemuengine

import "github.com/taskcluster/taskcluster-worker/runtime"

type (
	qemuPayload struct {

		// Command and arguments to execute on the guest.
		Command []string `json:"command"`

		// URL to an image file. This is a lz4 compressed tar archieve containing
		// a raw disk image `disk.img`, a qcow2 overlay `layer.qcow2` and a machine
		// definition file `machine.json`.
		// Refer to engine documentation for more details.
		Image string `json:"image"`
	}
)

var qemuPayloadSchema = func() runtime.CompositeSchema {
	schema, err := runtime.NewCompositeSchema(
		"start",
		`
		{
		  "$schema": "http://json-schema.org/draft-04/schema#",
		  "additionalProperties": false,
		  "properties": {
		    "command": {
		      "description": "Command and arguments to execute on the guest.\n",
		      "items": {
		        "type": "string"
		      },
		      "type": "array"
		    },
		    "image": {
		      "description": "URL to an image file. This is a lz4 compressed tar archieve containing\na raw disk image `+"`"+`disk.img`+"`"+`, a qcow2 overlay `+"`"+`layer.qcow2`+"`"+` and a machine\ndefinition file `+"`"+`machine.json`+"`"+`.\nRefer to engine documentation for more details.\n",
		      "format": "uri",
		      "type": "string"
		    }
		  },
		  "required": [
		    "image",
		    "command"
		  ],
		  "title": "QEMU Payload",
		  "type": "object"
		}
		`,
		true,
		func() interface{} {
			return &qemuPayload{}
		},
	)
	if err != nil {
		panic(err)
	}
	return schema
}()
